pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE_BASE = 'adriandez/cypress-automation'
        CONFIGMAP_PATH = 'build/k8s/cypress-configmap.yaml'
        CONFIGMAP_PATH_CRON = 'build/k8s/cypress-cron-configmap.yaml'
        JOB_PATH = 'build/k8s/cypress-job.yaml'
        CRON_JOB_PATH = 'build/k8s/cypress-cron-job.yaml'
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'  
        KUBERNETES_CREDENTIALS = 'docker-desktop-kubeconfig'  
    }

    parameters {
        choice(
            choices: ['develop', 'master'],
            name: 'BRANCH',
            description: 'Branch to build'
        )
        choice(
            choices: ['chrome', 'edge', 'firefox'],
            name: 'BROWSER',  
            description: 'Browser to use'
        )
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${params.BRANCH}"]],
                    userRemoteConfigs: [[
                        credentialsId: 'win-adri-id',
                        url: 'https://github.com/adriandez/cypress-automation.git'
                    ]]
                ])
            }
        }
        
        stage('Build and Push Base Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                        def baseImage = docker.build("${DOCKER_IMAGE_BASE}:latest", "-f build/Dockerfile .")
                        baseImage.push()
                    }
                }
            }
        }

        stage('Build and Push Browser-Specific Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                        def browserImage = docker.build("${DOCKER_IMAGE_BASE}:${params.BROWSER}",
                            "--build-arg INSTALL_BROWSER=${params.BROWSER} -f build/Dockerfile .")
                        
                        bat "docker inspect ${DOCKER_IMAGE_BASE}:${params.BROWSER} | findstr INSTALL_BROWSER"
                        browserImage.push()
                    }
                }
            }
        }

        stage('Clean Up Docker Images') {
            steps {
                script {
                    bat '''
                        for /f "tokens=3" %%i in ('docker images ^| findstr "cypress-automation"') do docker rmi %%i --force
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes Job') {
            steps {
                script {
                    withCredentials([file(credentialsId: KUBERNETES_CREDENTIALS, variable: 'KUBECONFIG')]) {
                        bat "kubectl apply -f ${CONFIGMAP_PATH} --kubeconfig=%KUBECONFIG%"
                        bat "kubectl apply -f ${JOB_PATH} --kubeconfig=%KUBECONFIG%"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes Cron Job') {
            steps {
                script {
                    withCredentials([file(credentialsId: KUBERNETES_CREDENTIALS, variable: 'KUBECONFIG')]) {
                        bat "kubectl apply -f ${CONFIGMAP_PATH_CRON} --kubeconfig=%KUBECONFIG%"
                        bat "kubectl apply -f ${CRON_JOB_PATH} --kubeconfig=%KUBECONFIG%"
                    }
                }
            }
        }
    } 

    post {
        success {
            echo 'Pipeline completed successfully'
        }
        failure {
            echo 'Pipeline failed'
        }
    }
}
